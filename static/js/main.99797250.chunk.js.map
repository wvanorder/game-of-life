{"version":3,"sources":["grid/cell.js","grid/neighborsArray.js","grid/styled-components.js","grid/grid.js","header/header.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","key","i","j","onClick","running","newGrid","produce","grid","grid2","setGrid","style","width","height","backgroundColor","undefined","border","possibleNeighbors","ButtonHolder","styled","div","Column","ColumnHolder","generation","Grid","useState","dimensions","setDimensions","gridSet","cellValue","rows","push","Array","from","updateDimensions","e","preventDefault","generationStep","neighbors","forEach","x","y","neighborI","neighborJ","setRunning","speed","setSpeed","runningRef","useRef","current","speedRef","runGame","useCallback","setTimeout","onSubmit","type","min","placeholder","name","value","onChange","parseInt","target","Math","random","display","gridTemplateColumns","map","column","Heady","Header","color","textDecoration","Appy","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99797250.chunk.js","sourcesContent":["import React, {useState, useCallback, useRef} from 'react';\nimport produce from 'immer';\n\nconst Cell = props => {\n    return(\n        <div\n            key ={`${props.i}-${props.j}`}\n            onClick={() => {\n            //if the simulation is running, don't do anything on click\n            if (props.running) {\n                return;\n            }\n            const newGrid = produce(props.grid, grid2 => {\n                grid2[props.i][props.j] = props.grid[props.i][props.j] ? 0 : 1;\n            })\n            props.setGrid(newGrid) \n            }}\n            style={{ width: 20,\n            height: 20, backgroundColor: props.grid[props.i][props.j] ? \"tomato\" : undefined, \n            border: \"1px solid black\"}}>\n        </div>\n    )\n}\n\nexport default Cell;","const possibleNeighbors = [\n    [-1,-1],\n    [-1,0],\n    [-1,1],\n    [0,-1],\n    [0,1],\n    [1,-1],\n    [1,0],\n    [1,1]\n];\n\nexport default possibleNeighbors;","import styled from 'styled-components';\n\nexport const  ButtonHolder = styled.div`\n    width: 80%;\n    max-width: 400px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    margin-bottom: 5px;\n`\n\nexport const Column = styled.div`\n    display: flex;\n    flex-flow: column nowrap;\n    align-items: center;\n    width: 500px;\n    button{\n        border-radius: 8px;\n        width: auto;\n        font-size: 1.2rem;\n        border: 2px solid #008CBA;\n        margin-bottom: 5px;\n        background: white;\n        &:hover{\n            transition-duration: 0.4s;\n            background: #008CBA;\n            color: white;\n        }\n    }\n`\n\nexport const ColumnHolder = styled.div`\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-around;\n`","import React, {useState, useCallback, useRef} from 'react';\n\n\nimport Cell from './cell'\nimport possibleNeighbors from './neighborsArray'\nimport produce from 'immer';\n\nimport {ButtonHolder,Column, ColumnHolder} from './styled-components'\nimport styled from 'styled-components';\n\n\n\n//all the possible indexes of neighbors, relative to the current position in the matrix\n\nvar generation = 0;\n\nconst Grid = () => {\n    //make this dynamic piece of state later to allow user to choose dimensions\n    const [dimensions, setDimensions] = useState({height: 25, width: 25});\n\n    const handleChange = e => {\n        e.preventDefault();\n        setDimensions({\n            ...dimensions,\n            height: parseInt(e.target.value),\n        })\n    };\n\n    //function for setting grid since I use it all over the place\n    const gridSet = cellValue => {\n        const rows = [];\n        for(let i = 0; i < dimensions.height; i ++) {\n            //all the 0s\n            rows.push(Array.from(Array(dimensions.width), () => cellValue))\n        }\n\n        return rows\n    }\n    const updateDimensions = (e) => {\n        e.preventDefault();\n        setGrid(gridSet(0))\n    };\n\n    const generationStep = () => {\n        generation += 1;\n        setGrid((grid) => {\n            return produce(grid, grid2 => {\n                //going through every row\n                for(let i = 0; i < dimensions.height; i++){\n                    //going through every column in each row \n                    for(let j = 0; j < dimensions.width; j++){\n                        let neighbors = 0;\n                        //run through each possible neighbor of any index\n                        possibleNeighbors.forEach(([x,y]) => {\n                            //'new' x,y coordinates for each possible neighbor\n                            const neighborI = i + x;\n                            const neighborJ = j + y;\n                            //check to see if that neighboring index lies within our matrix's parameters\n                            if(neighborI >= 0 && neighborI < dimensions.height && neighborJ >= 0 && neighborJ < dimensions.width){\n                                //add the value of the neighbor to the sum of neighbors\n                                neighbors += grid[neighborI][neighborJ]\n                            }\n                        })\n\n                        if(neighbors < 2 || neighbors > 3) {\n                            grid2[i][j] = 0;\n                        } else if(grid[i][j] === 0 && neighbors === 3) {\n                            grid2[i][j] = 1;\n                        }\n                    }\n                }\n            });\n        })\n    }\n\n    //initialize array matrix of 0s\n    const [grid, setGrid] = useState(gridSet(0));\n    const [running, setRunning] = useState(false);\n    const [speed, setSpeed] = useState(1000)\n    \n\n    //don't worry about most recent state thanks to useRef\n    const runningRef = useRef();\n    runningRef.current = running;\n\n    const speedRef = useRef();\n    speedRef.current = speed\n\n    const runGame = useCallback(() => {\n        //check to see if it is running\n        if(!runningRef.current) {\n            return;\n        }\n        generationStep()\n\n        \n        //call itself every one second to see if it is still running\n        setTimeout(runGame, speedRef.current);\n    }, [])\n\n    const randomize = () => {\n        if(running) {\n            return;\n        }\n        setGrid(() => {\n            const rows = [];\n            for(let i = 0; i < dimensions.height; i ++) {\n                //all the 0s\n                rows.push(Array.from(Array(dimensions.width), () => Math.random() > 0.5 ? 1: 0))\n            }\n    \n            return rows\n        \n        })\n    }\n\n    return (\n    <ColumnHolder>\n        <Column>\n            <ButtonHolder>\n                <form onSubmit={e => updateDimensions(e)}>\n                        <label>Height: </label>\n                        <input\n                            type=\"number\"\n                            min=\"1\"\n                            placeholder=\"height\"\n                            name=\"height\"\n                            value={dimensions.height}\n                            onChange={handleChange}\n                        />\n                </form>\n                <button onClick={e => updateDimensions(e)}>Update</button>\n            </ButtonHolder>\n            <ButtonHolder>\n                <button\n                    onClick={() => {\n                        setRunning(true);\n                        runningRef.current = true;\n                        runGame();\n                    }}\n                >\n                    Start\n                </button>\n                <button\n                    onClick={() => {\n                        setRunning(false);\n                        runningRef.current = false;\n                    }}\n                >\n                    Stop\n                </button>\n                <button\n                    onClick={() => {\n                        generation = 0;\n                        setRunning(false);\n                        setGrid(gridSet(0))\n                    }}\n                >\n                    clear\n                </button>\n            </ButtonHolder>\n            <ButtonHolder>\n                <button onClick={() => setSpeed(1500)}>Slow</button>            \n                <button onClick={() => setSpeed(1000)}>Normal Speed</button>\n                <button onClick={() => setSpeed(500)}>Fast</button>\n            </ButtonHolder>\n            <button onClick={() => randomize()}> Random Pattern </button>\n            <div style={{\n                display: 'grid',\n                //n = dimensions of columns, each 20px wide\n                gridTemplateColumns: `repeat(${dimensions.width}, 20px)`\n            }}>\n                {grid.map((rows, i) => rows.map((column, j) => (\n                    <Cell\n                        running={running} \n                        grid={grid}\n                        i={i}\n                        j={j}\n                        setGrid={setGrid}    \n                    />)))}\n            </div>\n            <div>\n            Days of Quarantine: {generation}\n            </div>\n            <button onClick={() => generationStep()}>move forward one generation</button>\n        </Column>\n        <Column>\n            <h2>The Rules</h2>\n            <p>You are responsible the community of cells on your left. Because of a recent global pandemic, certain \"cell-distancing\" policies have been put in place to protect the community. They are as follows:\n            <ol>\n                <li>Any cell with fewer than two neighbors dies of isolation</li>\n                <li>Any cell with more than three neighbors dies of overpopulation (keep your social distance!)</li>\n                <li>any currently dead cell with exactly three living neighbors will become living in the next turn (the power of positivity!)</li>\n            </ol>\n            </p>\n        </Column>\n    </ColumnHolder>\n    );\n  }\n  \n  export default Grid;","import React from 'react';\nimport styled from 'styled-components'\n\n\nconst Heady = styled.div`\n    display: flex;\n    flex-flow: column nowrap;\n    align-items: center;\n    background-color: lavender;\n\n    h1{\n        font-size: 2.4rem;\n        margin: 0;\n        color: mediumaquamarine;\n    }\n`\n\nconst Header = () => {\n    return(\n        <Heady>\n            <h1>\n                John Conway's Game of <span style={{color: 'black', textDecoration: 'line-through'}}>\n                <span style={{color: 'mediumaquamarine'}}>Life</span>\n                </span> Quarantine\n            </h1>\n        </Heady>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Grid from './grid/grid'\nimport Header from './header/header';\n\nconst Appy =styled.div`\n  background-color: lavender;\n  height: 100vh;\n  text-align: center;\n  height: 100vh;\n`\n\n\nfunction App() {\n  return (\n    <Appy>\n      <Header />\n      <Grid />\n    </Appy>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}